#!/usr/bin/env python
import csv
import pprint
import socket
from netaddr import *

def get_list_from_csv(input_file, debug=False):
    '''
       INPUT      input_file    STRING    Represents the csv file to import to a list
       RETURN                   LIST      Represents the data imported from the csv file in a list format
       DEBUG                    PRINT     Prints the contents of the list and any errors reported attempting to open the file
    '''

    with open(input_file, 'r') as csvfile:
        csv_networks = csv.reader(csvfile, dialect="excel")
        network_list = list(csv_networks)

    return network_list

def get_network_details(network_list, ip, debug=False):
    '''
       INPUT      network_list  LIST      Represents a master subnet list to the function for processing
                                          [0] is expected to be an IP in the network you are matching, preferably the first IP in range ( 10.10.0.0 )
                                          [1] is expected to be the CIDR range for the network you are matching ( 16 ) :: 10.10.0.0/16
                                          [2] is expected to be the segment details describing what the network range is for.  This is returned to user if matched
                  ip            STRING    Represents an IP address to compare against the master subnet list
       RETURN                   STRING    Represents the segment information contained in the master subnet list at [2] when matched
    '''
    foundFW = False

    for network in network_list:
        ip_subnet=network[0]
        cidr_mask=network[1]
        segment_details=network[2]
        ip_and_cidr = ip_subnet+'/'+cidr_mask

        if IPAddress(ip) in IPNetwork(ip_and_cidr):
            if (debug):
                print ("Found: {} netmask {}".format(ip,cidr_mask))
                print ("Segment Details: {}".format(segment_details))
            foundFW = True
            break

        if not foundFW:
            if (debug):
                print ("Not Behind Country\n")
            segment_details = "none"

        if (debug):
            print ("Returning {}".format(segment_details))

    return(segment_details)

list_master_networks = get_list_from_csv('networks.csv')
list_input_ips = get_list_from_csv('pano_export.csv')
for ip in list_input_ips:
    segment = get_network_details(list_master_networks, ip[0])
    print("{},{}".format(ip[0],segment))
